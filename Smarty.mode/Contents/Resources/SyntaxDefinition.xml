<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
	<!-- STUDIO - rewritten for 1.6.1, do not replace. -->
	<head>
		<name>Smarty</name> <!-- The definitions title -->
		<charsintokens><![CDATA[@$_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ<>]]></charsintokens>
	</head>

	<states>

		<default id="Base" usesymbolsfrommode="HTML" useautocompletefrommode="HTML" usespellchecking="yes" scope="meta.default">
			<import mode="XML" keywords-only="yes"/>
			<state id="Smarty Comment" type="comment" background-color="none" usesymbolsfrommode="Smarty" useautocompletefrommode="Smarty" scope="comment.block">
				<begin><regex>{\*</regex><autoend>\*}</autoend></begin>
				<end><regex>\*}</regex></end>
			</state>

			<state id="Smarty Command" useforautocomplete="no" usesymbolsfrommode="Smarty" useautocompletefrommode="Smarty" scope="meta.block">
				<begin><regex>\{</regex></begin>
				<end><regex>\}</regex></end>
								
				<keywords id="Smarty Block Delimiter" useforautocomplete="no" scope="markup.processing.languageswitch">
					<regex>({)</regex>
					<regex>(})</regex>
				</keywords>

				<state id="Smarty Strings" type="string" useforautocomplete="no" scope="string.double">
					<begin><regex>"</regex></begin>
					<end><regex>(((?&lt;!\\)(\\\\)*)|^)"</regex></end>

					<keywords id="Variables in Strings" useforautocomplete="no" scope="language.variable">
						<regex>(\$[\w\d]+)</regex>
					</keywords>

				</state>

				<state id="Smarty Strings2" type="string" useforautocomplete="no" scope="string.single">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>					
				</state>

				<keywords id="Variables" useforautocomplete="yes" scope="language.variable">
					<regex>(\$[\w\d]+)</regex>
				</keywords>

				<keywords id="Config File Variables" useforautocomplete="no" scope="language.variable.config">
					<regex>(#[^#]*#)</regex>
				</keywords>

				<keywords id="Built-in Functions" useforautocomplete="yes" scope="keyword.control">
					<regex>(?&lt;=[^\w\d])(?i)(/?capture)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(config_load)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(/?foreach)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(foreachelse)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(/?if)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(elseif)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(else)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(include)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(include_php)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(insert)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(ldelim)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(rdelim)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(/?literal)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(/?php)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(/?section)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(sectionelse)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(assign)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(counter)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(cycle)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(debug)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(eval)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(fetch)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(html_checkboxes)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(html_image)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(html_options)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(html_radios)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(html_select_date)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(html_select_time)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(html_table)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(mailto)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(math)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(popup)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(popup_init)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(textformat)(?=[^\w\d])</regex>		
				</keywords>

				<keywords id="Function Attributes" useforautocomplete="no" scope="markup.tag.attribute.name">
					<regex>([\w-]*)(?=[ \t]*=)</regex>
				</keywords>

				<keywords id="Variable Modifiers" useforautocomplete="yes" scope="keyword">
					<regex>(?&lt;=[^\w\d])(?i)(capitalize)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(cat)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(count_characters)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(count_paragraphs)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(count_sentances)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(count_words)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(date_format)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(default)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(escape)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(indent)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(lower)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(nl2br)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(regex_replace)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(replace)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(spacify)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(string_format)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(/?strip)(?=[^\w\d])</regex>		
					<regex>(?&lt;=[^\w\d])(?i)(strip_tags)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(truncate)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(upper)(?=[^\w\d])</regex>
					<regex>(?&lt;=[^\w\d])(?i)(wordwrap)(?=[^\w\d])</regex>
				</keywords>

				<keywords id="Keywords" casesensitive="no" useforautocomplete="yes" scope="keyword">
					<string>eq</string>
					<string>ne</string>
					<string>neq</string>
					<string>gt</string>
					<string>lt</string>
					<string>gte</string>
					<string>ge</string>
					<string>lte</string>
					<string>le</string>
					<string>not</string>
					<string>mod</string>
					<string>or</string>
					<string>true</string>
					<string>false</string>
				</keywords>

				<keywords id="Numbers" useforautocomplete="no" scope="constant.numeric">
					<regex>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</regex>
				</keywords>

				<state-link state="Smarty Command" />

			</state>


			<!--  This is the "we do a complete HTML mode and import smarty commands everywhere" section -->
			<state id="Comment" type="comment" scope="markup.comment">
				<begin><regex>&lt;!--</regex><autoend>--></autoend></begin>
				<end><regex>--></regex></end>
				<keywords id="SGML Double Dash" useforautocomplete="no" scope="meta.invalid.sgmlcomment">
					<regex>(?&lt;!\!)(--)(?!>)</regex>
				</keywords>
				<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
				<state-link state="Smarty Command"/>
			</state>
			<state id="CDATA" foldable="yes" scope="markup.inline.cdata">
				<begin>
					<regex>&lt;!\s*\[CDATA\s*\[</regex>
					<autoend>\]\]></autoend>
				</begin>
				<end>
					<regex>\]\s*\]\s*></regex>
				</end>
				<state-link state="Smarty Command"/>
			</state>
			<state id="Doctype" foldable="no" scope="markup.declaration">
				<begin>
					<regex>&lt;!</regex><autoend>></autoend>
				</begin>
				<end>
					<regex>></regex>
				</end>
				<state id="String" type="string" scope="markup.declaration.string.double">
					<begin><regex>"</regex></begin>
					<end><regex>"</regex></end>
					<state-link state="Smarty Command"/>
				</state>
				<state id="SingleString" type="string" scope="markup.declaration.string.single">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>
					<state-link state="Smarty Command"/>
				</state>
				<state id="Block" type="block" foldable="yes" indent="yes" scope="meta.block.square">
					<begin><regex>\[</regex><autoend>\]</autoend></begin>
					<end><regex>]</regex></end>
					<import />
				</state>
				<state-link state="Smarty Command"/>
			</state>
			<state id="Escape" foldable="no" scope="markup.processing">
				<begin>
					<regex>&lt;\?</regex><autoend>\?></autoend>
				</begin>
				<end>
					<regex>\?></regex>
				</end>
				<state id="ProcessingString" type="string" scope="markup.processing.attribute.value.string">
					<begin><regex>"</regex></begin>
					<end><regex>"</regex></end>
					<state-link state="Smarty Command"/>
				</state>
				<state id="ProcessingSingleString" type="string" scope="markup.processing.attribute.value.string">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>
					<state-link state="Smarty Command"/>
				</state>
				<state-link state="Smarty Command"/>
			</state>
			<state id="Inline CSS" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" foldable="yes" indent="yes" scope="meta.block.css">
				<begin>
					<regex>&lt;[ \t]*(?i)style[^>]*></regex>
					<autoend>&lt;/style></autoend>
				</begin>
				<end>
					<regex>(?i)&lt;[ \t]*/[ \t]*style[ \t]*></regex>
				</end>
				<state-link state="Smarty Command"/>

				<import mode="CSS"/>
				<state id="CSSInside curly brackets" foldable="yes" indent="yes" scope="meta.block.curly">
					<begin>
						<string>{</string>
						<autoend>}</autoend>
					</begin>
					<end>
						<regex>}</regex>
					</end>
					<import mode="CSS" state="Inside curly brackets" keywords-only="yes"/>
					<state id="CSS Attribute state" scope="meta.block.attribute">
						<begin>
							<string>:</string>
						</begin>
						<end>
							<regex>(;|.(?=})|[\n\r])</regex>
						</end>
						<import mode="CSS" state="Attribute state" keywords-only="yes"/>
						<state-link state="Smarty Command"/>
						<state-link state="CSSAutodocComment"/>
						<state-link state="CSSComment"/>
						<state-link state="CSSString"/>
						<state-link state="CSSSingleString"/>
					</state>
					<state-link state="CSSAutodocComment"/>
					<state-link state="CSSComment"/>
					<state-link state="CSSString"/>
					<state-link state="CSSSingleString"/>
					<state-link state="Smarty Command"/>
				</state>

				<import keywords-only="yes"/>

				<state id="CSSRules" scope="style.at-rule">
					<begin>
						<regex>^@[-\w_]+</regex>
					</begin>
					<end>
						<regex>.(?=[{\n\r])</regex>
					</end>
				</state>

				<state id="CSSAutodocComment" type="comment" scope="style.comment.block.documentation">
					<begin>
						<string>/\*"</string>
						<autoend>"\*/</autoend>
					</begin>
					<end>
						<regex>"\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Smarty Command"/>
				</state>
				<state id="CSSComment" type="comment" scope="style.comment.block">
					<begin>
						<string>/\*</string>
						<autoend>\*/</autoend>
					</begin>
					<end>
						<regex>\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Smarty Command"/>
				</state>
				<state id="CSSString" type="string" scope="style.value.string.double">
					<begin>
						<string>"</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*"</regex>
					</end>
					<state-link state="Smarty Command"/>
				</state>
				<state id="CSSSingleString" type="string" scope="style.value.string.single">
					<begin>
						<string>'</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*'</regex>
					</end>
					<state-link state="Smarty Command"/>
				</state>

			</state>


			<state id="Inline JavaScript" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" foldable="yes" scope="meta.block.js">
				<begin>
					<regex>&lt;(?i)script[^>]*></regex><autoend>&lt;/script></autoend>
				</begin>
				<end>
					<regex>&lt;(?i)/script[^>]*></regex>
				</end>
				<import mode="JavaScript" keywords-only="yes"/>
				<import mode="XML" keywords-only="yes"/>

				<state id="JSAutodocComment" type="comment" scope="comment.block.documentation.js">
					<begin><regex>/\*"</regex></begin>
					<end><regex>"\*/</regex></end>
					<state-link state="Smarty Command"/>
				</state>

				<state id="JSComment" type="comment" scope="comment.block.js">
					<begin><regex>/\*</regex><autoend>\*/</autoend></begin>
					<end><regex>\*/</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Smarty Command"/>
				</state>

				<state id="JSSingleComment" type="comment" scope="comment.line.double-slash.js">
					<begin><regex>//</regex></begin>
					<end><regex>[\n\r]|&lt;(?i)/script\s*></regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Smarty Command"/>
				</state>

				<state id="JSRegular Expressions" type="string" scope="string.regexp.js">
					<begin><regex>(?&lt;![&lt;/])/.*?[^\\](?=/[^\n\r]*(?:;|\)|,|[\n\r]))</regex></begin>
					<end><regex>/[cgimosx]*</regex></end>
					<state-link state="Smarty Command"/>
				</state>

				<state id="JSString" type="string" scope="string.double.js">
					<begin><regex>"</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*"</regex></end>
					<state-link state="Smarty Command"/>
				</state>

				<state id="JSSingleString" type="string" scope="string.single.js">
					<begin><regex>'</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*'</regex></end>
					<state-link state="Smarty Command"/>
				</state>

				<state id="JSBlock" type="block" foldable="yes" indent="yes" scope="meta.block.curly.js">
					<begin><regex>{</regex><autoend>}</autoend></begin>
					<end><regex>}</regex></end>
					<import mode="JavaScript" keywords-only="yes"/>
					<import mode="Smarty" state="Inline JavaScript"/>
				</state>
				
				<state-link state="Smarty Command"/>

			</state>

			<state id="Single Tag with Smarty State" foldable="no" scope="meta.block.tag.php.no-content">
				<begin>
					<regex>&lt;\s*[^/?!][-:_\w]*(?=[^&lt;>]*{[^}]+?}[^>]*[^>]*/>)</regex>
				</begin>
				<end>
					<regex>/[ \t]*></regex>
				</end>
				<import/>
				<keywords id="Single Tags with Smarty Command" useforautocomplete="no" scope="markup.tag">
					<regex>(&lt;[^>]*)</regex>
					<regex>(\A[^&lt;>]*>)</regex>
				</keywords>
				<keywords id="Attributes in Single Tags with Smarty Command" useforautocomplete="no" scope="markup.tag.attribute.name">
					<regex>([\w-]*)(?=[ \t]*=[^&lt;]+)</regex>
				</keywords>
				<keywords id="Strings in Single Tags with Smarty Command" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
					<regex>=[ \t]*("[^"]*"|'[^']*')(?=[^&lt;]*)</regex>
					<regex>([^"]*")(?=[ \t]*>)</regex>
				</keywords>
			</state>

			<state id="Tag with Smarty Command State" foldable="yes" scope="meta.block.tag.php">
				<begin>
					<regex>&lt;\s*(?'phptagstatename'[^/?!][-:_\w]*)(?'trimmedstart'[^&lt;>]*{[^}]+?}[^>]*>)</regex> <!--  Used "trimmedstart regex group, to start searching earlier" -->
				</begin>
				<end>
					<regex>&lt;\s*/\s*(?#see-insert-start-group:phptagstatename)\s*></regex>
				</end>
				<import/>
				<keywords id="Tags with Smarty Command" useforautocomplete="no" scope="markup.tag">
					<regex>(&lt;[^>]*>?)</regex>
					<regex>(\A[^&lt;>]*>)</regex>
				</keywords>
				<keywords id="Attributes in Tags with Smarty Command" useforautocomplete="no" scope="markup.tag.attribute.name">
					<regex>([\w-]*)(?=[ \t]*=[^&lt;]+)</regex>
				</keywords>
				<keywords id="Strings in Tags with Smarty Command" type="string" useforautocomplete="no"  scope="markup.tag.attribute.value.string">
					<regex>=[ \t]*("[^"]*"|'[^']*')(?=[^&lt;]*)</regex>
					<regex>([^"]*")(?=[ \t]*>)</regex>
				</keywords>
			</state>

			<state id="Tag State" foldable="yes" indent="yes" scope="meta.default">
				<begin>
					<regex>&lt;\s*(?'xmltagstatename'[^/?!][-:_\w]*)\s*(?:[-:_\w]+=(?:"[^"]*"|'[^']*'|\w+)\s*)*\s*>(?'cutoffstart'(?:.|[\n])*&lt;/\k'xmltagstatename')</regex>
					<autoend>&lt;/\g&lt;xmltagstatename>></autoend>
				</begin>
				<end>
					<regex>&lt;\s*/\s*(?#see-insert-start-group:xmltagstatename)\s*></regex>
				</end>
				<import mode="XML" keywords-only="yes"/>
				<import />
			</state>

		</default>

	</states>

</syntax>
